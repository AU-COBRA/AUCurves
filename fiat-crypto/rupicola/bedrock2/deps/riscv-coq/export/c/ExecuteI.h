// This C file was autogenerated from Coq
#include <stdbool.h>
#include <stdint.h>

void executeI(RiscvState s, InstructionI inst) {
    switch (inst.kind) {
        case K_Lb: {
            int rd = inst.as_Lb.f0;
            int rs1 = inst.as_Lb.f1;
            int oimm12 = inst.as_Lb.f2;
            t a = getRegister(s, rs1);
            t addr = translate(s, AccessTypeLoad, alu_ZToReg(0b1), alu_add(a, alu_ZToReg(oimm12)));
            t x = loadByte(s, addr);
            setRegister(s, rd, alu_int8ToReg(x));
            break;
        }
        case K_Lh: {
            int rd = inst.as_Lh.f0;
            int rs1 = inst.as_Lh.f1;
            int oimm12 = inst.as_Lh.f2;
            t a = getRegister(s, rs1);
            t addr = translate(s, AccessTypeLoad, alu_ZToReg(0b10), alu_add(a, alu_ZToReg(oimm12)));
            t x = loadHalf(s, addr);
            setRegister(s, rd, alu_int16ToReg(x));
            break;
        }
        case K_Lw: {
            int rd = inst.as_Lw.f0;
            int rs1 = inst.as_Lw.f1;
            int oimm12 = inst.as_Lw.f2;
            t a = getRegister(s, rs1);
            t addr = translate(s, AccessTypeLoad, alu_ZToReg(0b100), alu_add(a, alu_ZToReg(oimm12)));
            t x = loadWord(s, addr);
            setRegister(s, rd, alu_int32ToReg(x));
            break;
        }
        case K_Lbu: {
            int rd = inst.as_Lbu.f0;
            int rs1 = inst.as_Lbu.f1;
            int oimm12 = inst.as_Lbu.f2;
            t a = getRegister(s, rs1);
            t addr = translate(s, AccessTypeLoad, alu_ZToReg(0b1), alu_add(a, alu_ZToReg(oimm12)));
            t x = loadByte(s, addr);
            setRegister(s, rd, alu_uInt8ToReg(x));
            break;
        }
        case K_Lhu: {
            int rd = inst.as_Lhu.f0;
            int rs1 = inst.as_Lhu.f1;
            int oimm12 = inst.as_Lhu.f2;
            t a = getRegister(s, rs1);
            t addr = translate(s, AccessTypeLoad, alu_ZToReg(0b10), alu_add(a, alu_ZToReg(oimm12)));
            t x = loadHalf(s, addr);
            setRegister(s, rd, alu_uInt16ToReg(x));
            break;
        }
        case K_Addi: {
            int rd = inst.as_Addi.f0;
            int rs1 = inst.as_Addi.f1;
            int imm12 = inst.as_Addi.f2;
            t x = getRegister(s, rs1);
            setRegister(s, rd, alu_add(x, alu_ZToReg(imm12)));
            break;
        }
        case K_Slli: {
            int rd = inst.as_Slli.f0;
            int rs1 = inst.as_Slli.f1;
            int shamt6 = inst.as_Slli.f2;
            t x = getRegister(s, rs1);
            setRegister(s, rd, alu_sll(x, shamt6));
            break;
        }
        case K_Slti: {
            int rd = inst.as_Slti.f0;
            int rs1 = inst.as_Slti.f1;
            int imm12 = inst.as_Slti.f2;
            t x = getRegister(s, rs1);
            t val = ((alu_signed_less_than(x, alu_ZToReg(imm12)))
                ? alu_ZToReg(0b1)
                : alu_ZToReg(0b0));
            setRegister(s, rd, val);
            break;
        }
        case K_Sltiu: {
            int rd = inst.as_Sltiu.f0;
            int rs1 = inst.as_Sltiu.f1;
            int imm12 = inst.as_Sltiu.f2;
            t x = getRegister(s, rs1);
            t val = ((alu_ltu(x, alu_ZToReg(imm12)))
                ? alu_ZToReg(0b1)
                : alu_ZToReg(0b0));
            setRegister(s, rd, val);
            break;
        }
        case K_Xori: {
            int rd = inst.as_Xori.f0;
            int rs1 = inst.as_Xori.f1;
            int imm12 = inst.as_Xori.f2;
            t x = getRegister(s, rs1);
            setRegister(s, rd, alu_xor(x, alu_ZToReg(imm12)));
            break;
        }
        case K_Ori: {
            int rd = inst.as_Ori.f0;
            int rs1 = inst.as_Ori.f1;
            int imm12 = inst.as_Ori.f2;
            t x = getRegister(s, rs1);
            setRegister(s, rd, alu_or(x, alu_ZToReg(imm12)));
            break;
        }
        case K_Andi: {
            int rd = inst.as_Andi.f0;
            int rs1 = inst.as_Andi.f1;
            int imm12 = inst.as_Andi.f2;
            t x = getRegister(s, rs1);
            setRegister(s, rd, alu_and(x, alu_ZToReg(imm12)));
            break;
        }
        case K_Srli: {
            int rd = inst.as_Srli.f0;
            int rs1 = inst.as_Srli.f1;
            int shamt6 = inst.as_Srli.f2;
            t x = getRegister(s, rs1);
            setRegister(s, rd, alu_srl(x, shamt6));
            break;
        }
        case K_Srai: {
            int rd = inst.as_Srai.f0;
            int rs1 = inst.as_Srai.f1;
            int shamt6 = inst.as_Srai.f2;
            t x = getRegister(s, rs1);
            setRegister(s, rd, alu_sra(x, shamt6));
            break;
        }
        case K_Auipc: {
            int rd = inst.as_Auipc.f0;
            int oimm20 = inst.as_Auipc.f1;
            t pc = getPC(s);
            setRegister(s, rd, alu_add(alu_ZToReg(oimm20), pc));
            break;
        }
        case K_Sb: {
            int rs1 = inst.as_Sb.f0;
            int rs2 = inst.as_Sb.f1;
            int simm12 = inst.as_Sb.f2;
            t a = getRegister(s, rs1);
            t addr = translate(s, AccessTypeStore, alu_ZToReg(0b1), alu_add(a, alu_ZToReg(simm12)));
            t x = getRegister(s, rs2);
            storeByte(s, addr, alu_regToInt8(x));
            break;
        }
        case K_Sh: {
            int rs1 = inst.as_Sh.f0;
            int rs2 = inst.as_Sh.f1;
            int simm12 = inst.as_Sh.f2;
            t a = getRegister(s, rs1);
            t addr = translate(s, AccessTypeStore, alu_ZToReg(0b10), alu_add(a, alu_ZToReg(simm12)));
            t x = getRegister(s, rs2);
            storeHalf(s, addr, alu_regToInt16(x));
            break;
        }
        case K_Sw: {
            int rs1 = inst.as_Sw.f0;
            int rs2 = inst.as_Sw.f1;
            int simm12 = inst.as_Sw.f2;
            t a = getRegister(s, rs1);
            t addr = translate(s, AccessTypeStore, alu_ZToReg(0b100), alu_add(a, alu_ZToReg(simm12)));
            t x = getRegister(s, rs2);
            storeWord(s, addr, alu_regToInt32(x));
            break;
        }
        case K_Add: {
            int rd = inst.as_Add.f0;
            int rs1 = inst.as_Add.f1;
            int rs2 = inst.as_Add.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            setRegister(s, rd, alu_add(x, y));
            break;
        }
        case K_Sub: {
            int rd = inst.as_Sub.f0;
            int rs1 = inst.as_Sub.f1;
            int rs2 = inst.as_Sub.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            setRegister(s, rd, alu_sub(x, y));
            break;
        }
        case K_Sll: {
            int rd = inst.as_Sll.f0;
            int rs1 = inst.as_Sll.f1;
            int rs2 = inst.as_Sll.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            setRegister(s, rd, alu_sll(x, alu_regToShamt(y)));
            break;
        }
        case K_Slt: {
            int rd = inst.as_Slt.f0;
            int rs1 = inst.as_Slt.f1;
            int rs2 = inst.as_Slt.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            t val = ((alu_signed_less_than(x, y))
                ? alu_ZToReg(0b1)
                : alu_ZToReg(0b0));
            setRegister(s, rd, val);
            break;
        }
        case K_Sltu: {
            int rd = inst.as_Sltu.f0;
            int rs1 = inst.as_Sltu.f1;
            int rs2 = inst.as_Sltu.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            t val = ((alu_ltu(x, y))
                ? alu_ZToReg(0b1)
                : alu_ZToReg(0b0));
            setRegister(s, rd, val);
            break;
        }
        case K_Xor: {
            int rd = inst.as_Xor.f0;
            int rs1 = inst.as_Xor.f1;
            int rs2 = inst.as_Xor.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            setRegister(s, rd, alu_xor(x, y));
            break;
        }
        case K_Srl: {
            int rd = inst.as_Srl.f0;
            int rs1 = inst.as_Srl.f1;
            int rs2 = inst.as_Srl.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            setRegister(s, rd, alu_srl(x, alu_regToShamt(y)));
            break;
        }
        case K_Sra: {
            int rd = inst.as_Sra.f0;
            int rs1 = inst.as_Sra.f1;
            int rs2 = inst.as_Sra.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            setRegister(s, rd, alu_sra(x, alu_regToShamt(y)));
            break;
        }
        case K_Or: {
            int rd = inst.as_Or.f0;
            int rs1 = inst.as_Or.f1;
            int rs2 = inst.as_Or.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            setRegister(s, rd, alu_or(x, y));
            break;
        }
        case K_And: {
            int rd = inst.as_And.f0;
            int rs1 = inst.as_And.f1;
            int rs2 = inst.as_And.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            setRegister(s, rd, alu_and(x, y));
            break;
        }
        case K_Lui: {
            int rd = inst.as_Lui.f0;
            int imm20 = inst.as_Lui.f1;
            setRegister(s, rd, alu_ZToReg(imm20));
            break;
        }
        case K_Beq: {
            int rs1 = inst.as_Beq.f0;
            int rs2 = inst.as_Beq.f1;
            int sbimm12 = inst.as_Beq.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            t pc = getPC(s);
            if (alu_reg_eqb(x, y)) {
                t newPC = alu_add(pc, alu_ZToReg(sbimm12));
                if (! alu_reg_eqb(alu_remu(newPC, alu_ZToReg(0b100)), alu_ZToReg(0b0))) {
                    raiseException(s, alu_ZToReg(0b0), alu_ZToReg(0b0));
                } else {
                    setPC(s, newPC);
                }
            }
            break;
        }
        case K_Bne: {
            int rs1 = inst.as_Bne.f0;
            int rs2 = inst.as_Bne.f1;
            int sbimm12 = inst.as_Bne.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            t pc = getPC(s);
            if (! alu_reg_eqb(x, y)) {
                t addr = alu_add(pc, alu_ZToReg(sbimm12));
                if (! alu_reg_eqb(alu_remu(addr, alu_ZToReg(0b100)), alu_ZToReg(0b0))) {
                    raiseException(s, alu_ZToReg(0b0), alu_ZToReg(0b0));
                } else {
                    setPC(s, addr);
                }
            }
            break;
        }
        case K_Blt: {
            int rs1 = inst.as_Blt.f0;
            int rs2 = inst.as_Blt.f1;
            int sbimm12 = inst.as_Blt.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            t pc = getPC(s);
            if (alu_signed_less_than(x, y)) {
                t addr = alu_add(pc, alu_ZToReg(sbimm12));
                if (! alu_reg_eqb(alu_remu(addr, alu_ZToReg(0b100)), alu_ZToReg(0b0))) {
                    raiseException(s, alu_ZToReg(0b0), alu_ZToReg(0b0));
                } else {
                    setPC(s, addr);
                }
            }
            break;
        }
        case K_Bge: {
            int rs1 = inst.as_Bge.f0;
            int rs2 = inst.as_Bge.f1;
            int sbimm12 = inst.as_Bge.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            t pc = getPC(s);
            if (! alu_signed_less_than(x, y)) {
                t addr = alu_add(pc, alu_ZToReg(sbimm12));
                if (! alu_reg_eqb(alu_remu(addr, alu_ZToReg(0b100)), alu_ZToReg(0b0))) {
                    raiseException(s, alu_ZToReg(0b0), alu_ZToReg(0b0));
                } else {
                    setPC(s, addr);
                }
            }
            break;
        }
        case K_Bltu: {
            int rs1 = inst.as_Bltu.f0;
            int rs2 = inst.as_Bltu.f1;
            int sbimm12 = inst.as_Bltu.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            t pc = getPC(s);
            if (alu_ltu(x, y)) {
                t addr = alu_add(pc, alu_ZToReg(sbimm12));
                if (! alu_reg_eqb(alu_remu(addr, alu_ZToReg(0b100)), alu_ZToReg(0b0))) {
                    raiseException(s, alu_ZToReg(0b0), alu_ZToReg(0b0));
                } else {
                    setPC(s, addr);
                }
            }
            break;
        }
        case K_Bgeu: {
            int rs1 = inst.as_Bgeu.f0;
            int rs2 = inst.as_Bgeu.f1;
            int sbimm12 = inst.as_Bgeu.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            t pc = getPC(s);
            if (! alu_ltu(x, y)) {
                t addr = alu_add(pc, alu_ZToReg(sbimm12));
                if (! alu_reg_eqb(alu_remu(addr, alu_ZToReg(0b100)), alu_ZToReg(0b0))) {
                    raiseException(s, alu_ZToReg(0b0), alu_ZToReg(0b0));
                } else {
                    setPC(s, addr);
                }
            }
            break;
        }
        case K_Jalr: {
            int rd = inst.as_Jalr.f0;
            int rs1 = inst.as_Jalr.f1;
            int oimm12 = inst.as_Jalr.f2;
            t x = getRegister(s, rs1);
            t pc = getPC(s);
            t newPC = alu_and(alu_add(x, alu_ZToReg(oimm12)), alu_lnot(alu_ZToReg(0b1)));
            if (! alu_reg_eqb(alu_remu(newPC, alu_ZToReg(0b100)), alu_ZToReg(0b0))) {
                raiseException(s, alu_ZToReg(0b0), alu_ZToReg(0b0));
            } else {
                setRegister(s, rd, alu_add(pc, alu_ZToReg(0b100)));
                setPC(s, newPC);
            }
            break;
        }
        case K_Jal: {
            int rd = inst.as_Jal.f0;
            int jimm20 = inst.as_Jal.f1;
            t pc = getPC(s);
            t newPC = alu_add(pc, alu_ZToReg(jimm20));
            if (! alu_reg_eqb(alu_remu(newPC, alu_ZToReg(0b100)), alu_ZToReg(0b0))) {
                raiseException(s, alu_ZToReg(0b0), alu_ZToReg(0b0));
            } else {
                setRegister(s, rd, alu_add(pc, alu_ZToReg(0b100)));
                setPC(s, newPC);
            }
            break;
        }
    }
}
