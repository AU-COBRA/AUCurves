// This C file was autogenerated from Coq
#include <stdbool.h>
#include <stdint.h>

void executeM(RiscvState s, InstructionM inst) {
    switch (inst.kind) {
        case K_Mul: {
            int rd = inst.as_Mul.f0;
            int rs1 = inst.as_Mul.f1;
            int rs2 = inst.as_Mul.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            setRegister(s, rd, alu_mul(x, y));
            break;
        }
        case K_Mulh: {
            int rd = inst.as_Mulh.f0;
            int rs1 = inst.as_Mulh.f1;
            int rs2 = inst.as_Mulh.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            setRegister(s, rd, alu_highBits(alu_regToZ_signed(x) * alu_regToZ_signed(y)));
            break;
        }
        case K_Mulhsu: {
            int rd = inst.as_Mulhsu.f0;
            int rs1 = inst.as_Mulhsu.f1;
            int rs2 = inst.as_Mulhsu.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            setRegister(s, rd, alu_highBits(alu_regToZ_signed(x) * alu_regToZ_unsigned(y)));
            break;
        }
        case K_Mulhu: {
            int rd = inst.as_Mulhu.f0;
            int rs1 = inst.as_Mulhu.f1;
            int rs2 = inst.as_Mulhu.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            setRegister(s, rd, alu_highBits(alu_regToZ_unsigned(x) * alu_regToZ_unsigned(y)));
            break;
        }
        case K_Div: {
            int rd = inst.as_Div.f0;
            int rs1 = inst.as_Div.f1;
            int rs2 = inst.as_Div.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            t q = ((alu_reg_eqb(x, alu_minSigned()) && alu_reg_eqb(y, alu_negate(alu_ZToReg(0b1))))
                ? x
                : ((alu_reg_eqb(y, alu_ZToReg(0b0)))
                    ? alu_negate(alu_ZToReg(0b1))
                    : alu_div(x, y)));
            setRegister(s, rd, q);
            break;
        }
        case K_Divu: {
            int rd = inst.as_Divu.f0;
            int rs1 = inst.as_Divu.f1;
            int rs2 = inst.as_Divu.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            t q = ((alu_reg_eqb(y, alu_ZToReg(0b0)))
                ? alu_maxUnsigned()
                : alu_divu(x, y));
            setRegister(s, rd, q);
            break;
        }
        case K_Rem: {
            int rd = inst.as_Rem.f0;
            int rs1 = inst.as_Rem.f1;
            int rs2 = inst.as_Rem.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            t r = ((alu_reg_eqb(x, alu_minSigned()) && alu_reg_eqb(y, alu_negate(alu_ZToReg(0b1))))
                ? alu_ZToReg(0b0)
                : ((alu_reg_eqb(y, alu_ZToReg(0b0)))
                    ? x
                    : alu_rem(x, y)));
            setRegister(s, rd, r);
            break;
        }
        case K_Remu: {
            int rd = inst.as_Remu.f0;
            int rs1 = inst.as_Remu.f1;
            int rs2 = inst.as_Remu.f2;
            t x = getRegister(s, rs1);
            t y = getRegister(s, rs2);
            t r = ((alu_reg_eqb(y, alu_ZToReg(0b0)))
                ? x
                : alu_remu(x, y));
            setRegister(s, rd, r);
            break;
        }
    }
}
