(* File generated by ./make_InstructionNotations.sh, do not edit *)
Require Export riscv.Spec.Decode.
Require Export riscv.Utility.InstructionCoercions.
Notation "'RISCV:' x  y  ..  z" := (@cons Instruction x (@cons Instruction y .. (@cons Instruction z nil) ..)) (at level 10).

Notation "'mulw' 'x' r1 , 'x' r2 , 'x' r3" := (Mulw r1 r2 r3) (at level 10, format "'//'     'mulw'     'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'divw' 'x' r1 , 'x' r2 , 'x' r3" := (Divw r1 r2 r3) (at level 10, format "'//'     'divw'     'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'divuw' 'x' r1 , 'x' r2 , 'x' r3" := (Divuw r1 r2 r3) (at level 10, format "'//'     'divuw'    'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'remw' 'x' r1 , 'x' r2 , 'x' r3" := (Remw r1 r2 r3) (at level 10, format "'//'     'remw'     'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'remuw' 'x' r1 , 'x' r2 , 'x' r3" := (Remuw r1 r2 r3) (at level 10, format "'//'     'remuw'    'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'mul' 'x' r1 , 'x' r2 , 'x' r3" := (Mul r1 r2 r3) (at level 10, format "'//'     'mul'      'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'mulh' 'x' r1 , 'x' r2 , 'x' r3" := (Mulh r1 r2 r3) (at level 10, format "'//'     'mulh'     'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'mulhsu' 'x' r1 , 'x' r2 , 'x' r3" := (Mulhsu r1 r2 r3) (at level 10, format "'//'     'mulhsu'   'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'mulhu' 'x' r1 , 'x' r2 , 'x' r3" := (Mulhu r1 r2 r3) (at level 10, format "'//'     'mulhu'    'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'div' 'x' r1 , 'x' r2 , 'x' r3" := (Div r1 r2 r3) (at level 10, format "'//'     'div'      'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'divu' 'x' r1 , 'x' r2 , 'x' r3" := (Divu r1 r2 r3) (at level 10, format "'//'     'divu'     'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'rem' 'x' r1 , 'x' r2 , 'x' r3" := (Rem r1 r2 r3) (at level 10, format "'//'     'rem'      'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'remu' 'x' r1 , 'x' r2 , 'x' r3" := (Remu r1 r2 r3) (at level 10, format "'//'     'remu'     'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'ld' 'x' r1 , 'x' r2 , i" := (Ld r1 r2 i) (at level 10, i at level 200, format "'//'     'ld'       'x' r1 ,  'x' r2 ,  i").
Notation "'lwu' 'x' r1 , 'x' r2 , i" := (Lwu r1 r2 i) (at level 10, i at level 200, format "'//'     'lwu'      'x' r1 ,  'x' r2 ,  i").
Notation "'addiw' 'x' r1 , 'x' r2 , i" := (Addiw r1 r2 i) (at level 10, i at level 200, format "'//'     'addiw'    'x' r1 ,  'x' r2 ,  i").
Notation "'slliw' 'x' r1 , 'x' r2 , i" := (Slliw r1 r2 i) (at level 10, i at level 200, format "'//'     'slliw'    'x' r1 ,  'x' r2 ,  i").
Notation "'srliw' 'x' r1 , 'x' r2 , i" := (Srliw r1 r2 i) (at level 10, i at level 200, format "'//'     'srliw'    'x' r1 ,  'x' r2 ,  i").
Notation "'sraiw' 'x' r1 , 'x' r2 , i" := (Sraiw r1 r2 i) (at level 10, i at level 200, format "'//'     'sraiw'    'x' r1 ,  'x' r2 ,  i").
Notation "'sd' 'x' r1 , 'x' r2 , i" := (Sd r1 r2 i) (at level 10, i at level 200, format "'//'     'sd'       'x' r1 ,  'x' r2 ,  i").
Notation "'addw' 'x' r1 , 'x' r2 , 'x' r3" := (Addw r1 r2 r3) (at level 10, format "'//'     'addw'     'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'subw' 'x' r1 , 'x' r2 , 'x' r3" := (Subw r1 r2 r3) (at level 10, format "'//'     'subw'     'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'sllw' 'x' r1 , 'x' r2 , 'x' r3" := (Sllw r1 r2 r3) (at level 10, format "'//'     'sllw'     'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'srlw' 'x' r1 , 'x' r2 , 'x' r3" := (Srlw r1 r2 r3) (at level 10, format "'//'     'srlw'     'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'sraw' 'x' r1 , 'x' r2 , 'x' r3" := (Sraw r1 r2 r3) (at level 10, format "'//'     'sraw'     'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'lb' 'x' r1 , 'x' r2 , i" := (Lb r1 r2 i) (at level 10, i at level 200, format "'//'     'lb'       'x' r1 ,  'x' r2 ,  i").
Notation "'lh' 'x' r1 , 'x' r2 , i" := (Lh r1 r2 i) (at level 10, i at level 200, format "'//'     'lh'       'x' r1 ,  'x' r2 ,  i").
Notation "'lw' 'x' r1 , 'x' r2 , i" := (Lw r1 r2 i) (at level 10, i at level 200, format "'//'     'lw'       'x' r1 ,  'x' r2 ,  i").
Notation "'lbu' 'x' r1 , 'x' r2 , i" := (Lbu r1 r2 i) (at level 10, i at level 200, format "'//'     'lbu'      'x' r1 ,  'x' r2 ,  i").
Notation "'lhu' 'x' r1 , 'x' r2 , i" := (Lhu r1 r2 i) (at level 10, i at level 200, format "'//'     'lhu'      'x' r1 ,  'x' r2 ,  i").
Notation "'fence' i , j" := (Fence i j) (at level 10, i at level 200, j at level 200, format "'//'     'fence'    i ,  j").
Notation "'fence_i'" := (Fence_i) (at level 10, format "'//'     'fence_i'").
Notation "'addi' 'x' r1 , 'x' r2 , i" := (Addi r1 r2 i) (at level 10, i at level 200, format "'//'     'addi'     'x' r1 ,  'x' r2 ,  i").
Notation "'slli' 'x' r1 , 'x' r2 , i" := (Slli r1 r2 i) (at level 10, i at level 200, format "'//'     'slli'     'x' r1 ,  'x' r2 ,  i").
Notation "'slti' 'x' r1 , 'x' r2 , i" := (Slti r1 r2 i) (at level 10, i at level 200, format "'//'     'slti'     'x' r1 ,  'x' r2 ,  i").
Notation "'sltiu' 'x' r1 , 'x' r2 , i" := (Sltiu r1 r2 i) (at level 10, i at level 200, format "'//'     'sltiu'    'x' r1 ,  'x' r2 ,  i").
Notation "'xori' 'x' r1 , 'x' r2 , i" := (Xori r1 r2 i) (at level 10, i at level 200, format "'//'     'xori'     'x' r1 ,  'x' r2 ,  i").
Notation "'ori' 'x' r1 , 'x' r2 , i" := (Ori r1 r2 i) (at level 10, i at level 200, format "'//'     'ori'      'x' r1 ,  'x' r2 ,  i").
Notation "'andi' 'x' r1 , 'x' r2 , i" := (Andi r1 r2 i) (at level 10, i at level 200, format "'//'     'andi'     'x' r1 ,  'x' r2 ,  i").
Notation "'srli' 'x' r1 , 'x' r2 , i" := (Srli r1 r2 i) (at level 10, i at level 200, format "'//'     'srli'     'x' r1 ,  'x' r2 ,  i").
Notation "'srai' 'x' r1 , 'x' r2 , i" := (Srai r1 r2 i) (at level 10, i at level 200, format "'//'     'srai'     'x' r1 ,  'x' r2 ,  i").
Notation "'auipc' 'x' r1 , i" := (Auipc r1 i) (at level 10, i at level 200, format "'//'     'auipc'    'x' r1 ,  i").
Notation "'sb' 'x' r1 , 'x' r2 , i" := (Sb r1 r2 i) (at level 10, i at level 200, format "'//'     'sb'       'x' r1 ,  'x' r2 ,  i").
Notation "'sh' 'x' r1 , 'x' r2 , i" := (Sh r1 r2 i) (at level 10, i at level 200, format "'//'     'sh'       'x' r1 ,  'x' r2 ,  i").
Notation "'sw' 'x' r1 , 'x' r2 , i" := (Sw r1 r2 i) (at level 10, i at level 200, format "'//'     'sw'       'x' r1 ,  'x' r2 ,  i").
Notation "'add' 'x' r1 , 'x' r2 , 'x' r3" := (Add r1 r2 r3) (at level 10, format "'//'     'add'      'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'sub' 'x' r1 , 'x' r2 , 'x' r3" := (Sub r1 r2 r3) (at level 10, format "'//'     'sub'      'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'sll' 'x' r1 , 'x' r2 , 'x' r3" := (Sll r1 r2 r3) (at level 10, format "'//'     'sll'      'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'slt' 'x' r1 , 'x' r2 , 'x' r3" := (Slt r1 r2 r3) (at level 10, format "'//'     'slt'      'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'sltu' 'x' r1 , 'x' r2 , 'x' r3" := (Sltu r1 r2 r3) (at level 10, format "'//'     'sltu'     'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'xor' 'x' r1 , 'x' r2 , 'x' r3" := (Xor r1 r2 r3) (at level 10, format "'//'     'xor'      'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'srl' 'x' r1 , 'x' r2 , 'x' r3" := (Srl r1 r2 r3) (at level 10, format "'//'     'srl'      'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'sra' 'x' r1 , 'x' r2 , 'x' r3" := (Sra r1 r2 r3) (at level 10, format "'//'     'sra'      'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'or' 'x' r1 , 'x' r2 , 'x' r3" := (Or r1 r2 r3) (at level 10, format "'//'     'or'       'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'and' 'x' r1 , 'x' r2 , 'x' r3" := (And r1 r2 r3) (at level 10, format "'//'     'and'      'x' r1 ,  'x' r2 ,  'x' r3").
Notation "'lui' 'x' r1 , i" := (Lui r1 i) (at level 10, i at level 200, format "'//'     'lui'      'x' r1 ,  i").
Notation "'beq' 'x' r1 , 'x' r2 , i" := (Beq r1 r2 i) (at level 10, i at level 200, format "'//'     'beq'      'x' r1 ,  'x' r2 ,  i").
Notation "'bne' 'x' r1 , 'x' r2 , i" := (Bne r1 r2 i) (at level 10, i at level 200, format "'//'     'bne'      'x' r1 ,  'x' r2 ,  i").
Notation "'blt' 'x' r1 , 'x' r2 , i" := (Blt r1 r2 i) (at level 10, i at level 200, format "'//'     'blt'      'x' r1 ,  'x' r2 ,  i").
Notation "'bge' 'x' r1 , 'x' r2 , i" := (Bge r1 r2 i) (at level 10, i at level 200, format "'//'     'bge'      'x' r1 ,  'x' r2 ,  i").
Notation "'bltu' 'x' r1 , 'x' r2 , i" := (Bltu r1 r2 i) (at level 10, i at level 200, format "'//'     'bltu'     'x' r1 ,  'x' r2 ,  i").
Notation "'bgeu' 'x' r1 , 'x' r2 , i" := (Bgeu r1 r2 i) (at level 10, i at level 200, format "'//'     'bgeu'     'x' r1 ,  'x' r2 ,  i").
Notation "'jalr' 'x' r1 , 'x' r2 , i" := (Jalr r1 r2 i) (at level 10, i at level 200, format "'//'     'jalr'     'x' r1 ,  'x' r2 ,  i").
Notation "'jal' 'x' r1 , i" := (Jal r1 i) (at level 10, i at level 200, format "'//'     'jal'      'x' r1 ,  i").
Notation "'ecall'" := (Ecall) (at level 10, format "'//'     'ecall'").
Notation "'ebreak'" := (Ebreak) (at level 10, format "'//'     'ebreak'").
Notation "'uret'" := (Uret) (at level 10, format "'//'     'uret'").
Notation "'sret'" := (Sret) (at level 10, format "'//'     'sret'").
Notation "'mret'" := (Mret) (at level 10, format "'//'     'mret'").
Notation "'wfi'" := (Wfi) (at level 10, format "'//'     'wfi'").
Notation "'sfence_vma' 'x' r1 , 'x' r2" := (Sfence_vma r1 r2) (at level 10, format "'//'     'sfence_vma' 'x' r1 ,  'x' r2").
Notation "'csrrw' 'x' r1 , 'x' r2 , i" := (Csrrw r1 r2 i) (at level 10, i at level 200, format "'//'     'csrrw'    'x' r1 ,  'x' r2 ,  i").
Notation "'csrrs' 'x' r1 , 'x' r2 , i" := (Csrrs r1 r2 i) (at level 10, i at level 200, format "'//'     'csrrs'    'x' r1 ,  'x' r2 ,  i").
Notation "'csrrc' 'x' r1 , 'x' r2 , i" := (Csrrc r1 r2 i) (at level 10, i at level 200, format "'//'     'csrrc'    'x' r1 ,  'x' r2 ,  i").
Notation "'csrrwi' 'x' r1 , i , j" := (Csrrwi r1 i j) (at level 10, i at level 200, j at level 200, format "'//'     'csrrwi'   'x' r1 ,  i ,  j").
Notation "'csrrsi' 'x' r1 , i , j" := (Csrrsi r1 i j) (at level 10, i at level 200, j at level 200, format "'//'     'csrrsi'   'x' r1 ,  i ,  j").
Notation "'csrrci' 'x' r1 , i , j" := (Csrrci r1 i j) (at level 10, i at level 200, j at level 200, format "'//'     'csrrci'   'x' r1 ,  i ,  j").
Notation "'lr_d' 'x' r1 , 'x' r2 , i" := (Lr_d r1 r2 i) (at level 10, i at level 200, format "'//'     'lr_d'     'x' r1 ,  'x' r2 ,  i").
Notation "'sc_d' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Sc_d r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'sc_d'     'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amoswap_d' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amoswap_d r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amoswap_d' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amoadd_d' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amoadd_d r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amoadd_d' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amoand_d' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amoand_d r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amoand_d' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amoor_d' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amoor_d r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amoor_d' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amoxor_d' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amoxor_d r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amoxor_d' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amomax_d' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amomax_d r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amomax_d' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amomaxu_d' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amomaxu_d r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amomaxu_d' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amomin_d' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amomin_d r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amomin_d' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amominu_d' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amominu_d r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amominu_d' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'lr_w' 'x' r1 , 'x' r2 , i" := (Lr_w r1 r2 i) (at level 10, i at level 200, format "'//'     'lr_w'     'x' r1 ,  'x' r2 ,  i").
Notation "'sc_w' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Sc_w r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'sc_w'     'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amoswap_w' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amoswap_w r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amoswap_w' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amoadd_w' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amoadd_w r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amoadd_w' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amoand_w' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amoand_w r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amoand_w' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amoor_w' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amoor_w r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amoor_w' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amoxor_w' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amoxor_w r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amoxor_w' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amomax_w' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amomax_w r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amomax_w' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amomaxu_w' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amomaxu_w r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amomaxu_w' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amomin_w' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amomin_w r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amomin_w' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
Notation "'amominu_w' 'x' r1 , 'x' r2 , 'x' r3 , i" := (Amominu_w r1 r2 r3 i) (at level 10, i at level 200, format "'//'     'amominu_w' 'x' r1 ,  'x' r2 ,  'x' r3 ,  i").
