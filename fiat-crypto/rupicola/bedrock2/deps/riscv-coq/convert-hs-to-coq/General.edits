import module Utility
import module Program
import module Monads
import module Coq.ZArith.BinInt

rename type Utility.MachineInt = Coq.ZArith.BinInt.Z
rename type GHC.Types.Int = Coq.ZArith.BinInt.Z

rename value GHC.Base.when = Utility.when

rewrite forall x y, x GHC.Num.- y = x - y
rewrite forall x y, x GHC.Num.+ y = x + y
rewrite forall x y, x GHC.Num.* y = x * y

rename value GHC.Base.map = Coq.Lists.List.map

rewrite forall, GHC.Err.error "ambiguous decoding result" = InvalidInstruction inst
rewrite forall x, GHC.Err.error GHC.Base.$ (Coq.Init.Datatypes.app "dispatch bug: " (GHC.Show.show x)) = Monads.Return tt

rewrite forall x y, (x GHC.Real.^ y) = Coq.ZArith.BinInt.Z.pow x y

rewrite forall x y, x GHC.Base.>>= y = Monads.Bind x y
rewrite forall x y, x GHC.Base.>> y = Monads.Bind x (fun _ => y)

rename value VirtualMemory.translate = Program.translate
rename value VirtualMemory.Load = Program.Load
rename value VirtualMemory.Instr = Program.Instr
rename value VirtualMemory.Store = Program.Store

rewrite forall, GHC.Base.return_ = Return
rename type Program.RiscvProgram = Program.RiscvState
rewrite forall priv, priv GHC.Base.== Spec.Machine.User       = Spec.Machine.PrivMode_eqb priv Spec.Machine.User
rewrite forall priv, priv GHC.Base.== Spec.Machine.Supervisor = Spec.Machine.PrivMode_eqb priv Spec.Machine.Supervisor
rewrite forall priv, priv GHC.Base.== Spec.Machine.Machine    = Spec.Machine.PrivMode_eqb priv Spec.Machine.Machine
